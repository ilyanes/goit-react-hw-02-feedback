{"version":3,"sources":["App.styled.jsx","components/Buttons/Buttons.jsx","components/Notification/Notification.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/Counter/Counter.jsx","App.js","index.js"],"names":["Container","styled","div","TitleStatics","section","StyleNoFeedback","p","Buttons","buttons","onClick","map","button","name","Notification","message","Section","title","children","Statistics","total","positivePercentage","good","neutral","bad","Counter","state","props","initialValue","handleClick","e","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","totalFeedback","Math","floor","this","percentage","Component","defaultProps","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAEaA,EAAYC,IAAOC,IAAV,2SAcTC,EAAeF,IAAOG,QAAV,iIAQZC,EAAkBJ,IAAOK,EAAV,4C,OCvBfC,EAAU,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACjC,OACE,mCACGD,EAAQE,KAAI,SAACC,GACZ,OACE,wBAAqBF,QAASA,EAASG,KAAMD,EAA7C,SACGA,GADUA,SCKRE,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,cAACT,EAAD,UAAkBS,KCaZC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,eAACd,EAAD,WACE,6BAAKa,IACJC,MCeQC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,mBAAoBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,IAC9D,OACE,gCACE,uCAAUF,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWJ,KACX,oDAAuBC,SCFvBI,E,4MAKJC,MAAQ,CACNJ,KAAM,EAAKK,MAAMC,aACjBL,QAAS,EAAKI,MAAMC,aACpBJ,IAAK,EAAKG,MAAMC,c,EAMlBC,YAAc,SAACC,GACb,IAAQjB,EAASiB,EAAEC,OAAXlB,KACR,EAAKmB,UAAS,SAACC,GAAD,sBACXpB,EAAOoB,EAAUpB,GAAQ,O,EAI9BqB,mBAAqB,WACnB,MAA+B,EAAKR,MAEpC,OAFA,EAAQJ,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzBW,gCAAkC,WAChC,IAAQb,EAAS,EAAKI,MAAdJ,KACFc,EAAgB,EAAKF,qBAE3B,OADmBG,KAAKC,MAAc,IAAPhB,EAAcc,I,4CAI/C,WACE,IAAMhB,EAAQmB,KAAKL,qBACbM,EAAaD,KAAKJ,kCAExB,OACE,eAAClC,EAAD,WACE,cAAC,EAAD,CAASgB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACER,QAAS,CAAC,OAAQ,UAAW,OAC7BC,QAAS6B,KAAKV,gBAIP,IAAVT,EACC,cAAC,EAAD,CAAcL,QAAS,sBAEvB,cAAC,EAAD,CAASE,MAAO,aAAhB,SACE,cAAC,EAAD,CACEK,KAAMiB,KAAKb,MAAMJ,KACjBC,QAASgB,KAAKb,MAAMH,QACpBC,IAAKe,KAAKb,MAAMF,IAChBJ,MAAOA,EACPC,mBAAoBmB,a,GAxDZC,aAAhBhB,EACGiB,aAAe,CACpBd,aAAc,GA+DHH,QC7DAkB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ecc32d30.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  font-size: 14px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 35%;\r\n  margin: auto;\r\n  margin-top: 10px;\r\n  background-color: yellow;\r\n  border-radius: 20px;\r\n  box-shadow: 4px 3px 6px 4px rgba(155, 155, 155, 0.75);\r\n  padding: 40px;\r\n`;\r\n\r\nexport const TitleStatics = styled.section`\r\n  text-align: center;\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  width: 100%;\r\n`;\r\n\r\nexport const StyleNoFeedback = styled.p`\r\n  color: grey;\r\n`;\r\n","import PropTypes from \"prop-types\";\r\nexport const Buttons = ({ buttons, onClick }) => {\r\n  return (\r\n    <>\r\n      {buttons.map((button) => {\r\n        return (\r\n          <button key={button} onClick={onClick} name={button}>\r\n            {button}\r\n          </button>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nButtons.propTypes = {\r\n  buttons: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport { StyleNoFeedback } from \"../../App.styled\";\r\n\r\nfunction Notification({ message }) {\r\n  return <StyleNoFeedback>{message}</StyleNoFeedback>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from \"prop-types\";\r\nimport { TitleStatics } from \"../../App.styled\";\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <TitleStatics>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </TitleStatics>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Statistics({ total, positivePercentage, good, neutral, bad }) {\r\n  return (\r\n    <div>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive Feedback: {positivePercentage}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import { Component } from \"react\";\r\nimport { Container } from \"../../App.styled\";\r\nimport { Buttons } from \"../Buttons/Buttons\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport Section from \"../Section/Section\";\r\nimport Statistics from \"../Statistics/Statistics\";\r\n\r\nclass Counter extends Component {\r\n  static defaultProps = {\r\n    initialValue: 0,\r\n  };\r\n\r\n  state = {\r\n    good: this.props.initialValue,\r\n    neutral: this.props.initialValue,\r\n    bad: this.props.initialValue,\r\n  };\r\n\r\n  //   allButtons = Object.keys(this.state);\r\n  //   staticData = {};\r\n\r\n  handleClick = (e) => {\r\n    const { name } = e.target;\r\n    this.setState((prevState) => ({\r\n      [name]: prevState[name] + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = good + neutral + bad;\r\n    return total;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good } = this.state;\r\n    const totalFeedback = this.countTotalFeedback();\r\n    const percentage = Math.floor((good * 100) / totalFeedback);\r\n    return percentage;\r\n  };\r\n\r\n  render() {\r\n    const total = this.countTotalFeedback();\r\n    const percentage = this.countPositiveFeedbackPercentage();\r\n\r\n    return (\r\n      <Container>\r\n        <Section title={\"Please leave feedback\"}>\r\n          <Buttons\r\n            buttons={[\"good\", \"neutral\", \"bad\"]}\r\n            onClick={this.handleClick}\r\n          ></Buttons>\r\n        </Section>\r\n\r\n        {total === 0 ? (\r\n          <Notification message={\"No feedback given\"} />\r\n        ) : (\r\n          <Section title={\"Statistics\"}>\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={total}\r\n              positivePercentage={percentage}\r\n            />\r\n          </Section>\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import \"./App.css\";\nimport Counter from \"./components/Counter/Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}